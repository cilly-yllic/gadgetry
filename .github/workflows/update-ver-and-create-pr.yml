name: Update Repository Version & Create Repository

on:
  pull_request:
    branches:
      - staging
    types: [closed]

env:
  NODE_VERSION_FILE: .nvmrc

jobs:
  update-version:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      tag-name: ${{ steps.tag-name.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - run: npm ci --omit=dev --ignore-scripts
      - run: npm i -D tsx
      - run: npm run ci:update-version

      - name: Push auto-fixed files
        run: |
          git remote set-url origin https://github-actions:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          if (git diff --shortstat | grep '[0-9]'); then \
            git add package.json; \
            git commit -m "[ci:auto-fix] Update Repository Version"; \
            git push origin HEAD:${GITHUB_REF}; \
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Tag Name
        uses: ./.github/actions/get-tag-name
        id: get-tag-name

      - id: tag-name
        run: echo "value=${{ steps.get-tag-name.outputs.tag-name }}" >> $GITHUB_OUTPUT

  create-pr:
    runs-on: ubuntu-latest
    needs: update-version
    if: needs.update-version.outputs.tag-name != ''
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全タグ・全ブランチ・全履歴を取得
      - run: git fetch --depth=10000 --tags
      - run: git pull
      - name: Get Previous Tag
        id: get-previous-tag
        run: |
          latestTag=$(git tag -l --no-merged staging --sort=-creatordate | sed -n 1p) || true
          firstTag=$(git tag -l '*+stg' --sort=creatordate | sed -n 1p) || true
          previousTag=${latestTag:-$firstTag}
          echo "tag=$previousTag" >> $GITHUB_OUTPUT

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - run: npm ci

      - name: Get Summary
        uses: ./.github/actions/get-summary
        id: get-summary
        with:
          previous-tag: ${{ steps.get-previous-tag.outputs.tag }}

      - name: PR Check
        id: check-pr
        run: |
          MAIN=$(gh pr list -B main)
          echo "exists=$MAIN" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release PR
        if: steps.check-pr.outputs.exists == ''
        run: gh pr create -B "main" -t "Release ${{ needs.update-version.outputs.tag-name }}" -b "${{steps.get-summary.outputs.summary}}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Edit Release PR
        if: steps.check-pr.outputs.exists != ''
        run: gh pr edit -B "main" -t "Release ${{ needs.update-version.outputs.tag-name }}" -b "${{steps.get-summary.outputs.summary}}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
